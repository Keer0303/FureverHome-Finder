{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"UserPersonalCenter\",\n  data() {\n    const validatePassword = (rule, value, callback) => {\n      const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n      if (value === '') {\n        callback(new Error('Please enter the password'));\n      } else if (!passwordPattern.test(value)) {\n        callback(new Error('Password must be at least 8 characters long and include both letters and numbers'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      passwordData: {\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      profileRules: {\n        phone: [{\n          required: true,\n          message: 'Phone number is required',\n          trigger: 'blur'\n        }, {\n          pattern: /^[0-9]{10}$/,\n          message: 'Please enter a valid 10-digit phone number',\n          trigger: ['blur', 'change']\n        }],\n        email: [{\n          required: true,\n          message: 'Email is required',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Please enter a valid email address',\n          trigger: ['blur', 'change']\n        }]\n      },\n      passwordRules: {\n        currentPassword: [{\n          required: true,\n          message: 'Please enter the current password',\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          validator: validatePassword,\n          required: true,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          validator: validatePassword,\n          required: true,\n          trigger: 'blur'\n        }, {\n          validator: this.validateConfirmPassword,\n          trigger: 'blur'\n        }]\n      },\n      passwordDialogVisible: false\n    };\n  },\n  methods: {\n    openPasswordDialog() {\n      this.passwordDialogVisible = true;\n    },\n    validateConfirmPassword(rule, value, callback) {\n      if (value !== this.passwordData.newPassword) {\n        callback(new Error('Passwords do not match'));\n      } else {\n        callback();\n      }\n    },\n    updateProfile() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request.put('/user/update', this.user).then(res => {\n            if (res.code === '200') {\n              // Successfully updated\n              this.$message.success('Profile updated successfully');\n\n              // Update the cached user information in the browser\n              localStorage.setItem('xm-user', JSON.stringify(this.user));\n\n              // Trigger parent data update\n              this.$emit('update:user');\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        } else {\n          this.$message.error('Please check your input and try again.');\n        }\n      });\n    },\n    updatePassword() {\n      this.$refs.passwordFormRef.validate(valid => {\n        if (valid) {\n          this.$request.put('/updatePassword', this.passwordData).then(res => {\n            if (res.code === '200') {\n              // Successfully updated password\n              localStorage.removeItem('xm-user'); // Clear cached user information\n              this.$message.success('Password changed successfully');\n              this.$router.push('/login');\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        } else {\n          this.$message.error('Please check your input and try again.');\n        }\n      });\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // Replace the user's avatar property with the link to the uploaded image\n      this.$set(this.user, 'avatar', response.data);\n    }\n  }\n};","map":{"version":3,"names":["name","data","validatePassword","rule","value","callback","passwordPattern","Error","test","user","JSON","parse","localStorage","getItem","passwordData","currentPassword","newPassword","confirmPassword","profileRules","phone","required","message","trigger","pattern","email","type","passwordRules","validator","validateConfirmPassword","passwordDialogVisible","methods","openPasswordDialog","updateProfile","$refs","formRef","validate","valid","$request","put","then","res","code","$message","success","setItem","stringify","$emit","error","msg","updatePassword","passwordFormRef","removeItem","$router","push","handleAvatarSuccess","response","file","fileList","$set"],"sources":["src/views/manager/UserPerson.vue"],"sourcesContent":["<template>\r\n  <div class=\"centered-wrapper\">\r\n    <el-card class=\"user-card\">\r\n      <el-form\r\n          ref=\"formRef\"\r\n          :model=\"user\"\r\n          :rules=\"profileRules\"\r\n          label-width=\"120px\"\r\n          class=\"user-form\"\r\n      >\r\n        <!-- Avatar Upload -->\r\n        <div class=\"avatar-upload-container\">\r\n          <el-tooltip content=\"Upload Image\" placement=\"top\">\r\n            <el-upload\r\n                class=\"avatar-uploader\"\r\n                :action=\"$baseUrl + '/files/upload'\"\r\n                :show-file-list=\"false\"\r\n                :on-success=\"handleAvatarSuccess\"\r\n            >\r\n              <img v-if=\"user.avatar\" :src=\"user.avatar\" class=\"avatar\" />\r\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n            </el-upload>\r\n          </el-tooltip>\r\n        </div>\r\n\r\n        <!-- Profile Information -->\r\n        <el-form-item label=\"Username\" prop=\"username\">\r\n          <el-input\r\n              v-model=\"user.username\"\r\n              placeholder=\"Username\"\r\n              disabled\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Name\" prop=\"name\">\r\n          <el-input v-model=\"user.name\" placeholder=\"Name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Phone\" prop=\"phone\">\r\n          <el-input v-model=\"user.phone\" placeholder=\"Phone\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Email\" prop=\"email\">\r\n          <el-input v-model=\"user.email\" placeholder=\"Email\"></el-input>\r\n        </el-form-item>\r\n\r\n        <!-- Password Update Button -->\r\n        <div class=\"button-container\">\r\n          <el-button type=\"primary\" @click=\"openPasswordDialog\">Change Password</el-button>\r\n        </div>\r\n\r\n        <!-- Save Button -->\r\n        <div class=\"button-container\">\r\n          <el-button type=\"primary\" @click=\"updateProfile\">Save Changes</el-button>\r\n        </div>\r\n      </el-form>\r\n    </el-card>\r\n\r\n    <!-- Password Change Dialog -->\r\n    <el-dialog\r\n        title=\"Change Password\"\r\n        :visible.sync=\"passwordDialogVisible\"\r\n        width=\"600px\"\r\n    >\r\n      <el-form\r\n          ref=\"passwordFormRef\"\r\n          :model=\"passwordData\"\r\n          :rules=\"passwordRules\"\r\n          label-width=\"120px\"\r\n          class=\"password-form\"\r\n      >\r\n        <el-form-item label=\"Current Password\" prop=\"currentPassword\">\r\n          <el-input\r\n              show-password\r\n              v-model=\"passwordData.currentPassword\"\r\n              placeholder=\"Current Password\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"New Password\" prop=\"newPassword\">\r\n          <el-input\r\n              show-password\r\n              v-model=\"passwordData.newPassword\"\r\n              placeholder=\"New Password\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Confirm Password\" prop=\"confirmPassword\">\r\n          <el-input\r\n              show-password\r\n              v-model=\"passwordData.confirmPassword\"\r\n              placeholder=\"Confirm Password\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <!-- Dialog Footer -->\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"passwordDialogVisible = false\">Cancel</el-button>\r\n        <el-button type=\"primary\" @click=\"updatePassword\">Confirm Changes</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"UserPersonalCenter\",\r\n  data() {\r\n    const validatePassword = (rule, value, callback) => {\r\n      const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\r\n      if (value === '') {\r\n        callback(new Error('Please enter the password'));\r\n      } else if (!passwordPattern.test(value)) {\r\n        callback(new Error('Password must be at least 8 characters long and include both letters and numbers'));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      passwordData: {\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        confirmPassword: '',\r\n      },\r\n      profileRules: {\r\n        phone: [\r\n          { required: true, message: 'Phone number is required', trigger: 'blur' },\r\n          { pattern: /^[0-9]{10}$/, message: 'Please enter a valid 10-digit phone number', trigger: ['blur', 'change'] },\r\n        ],\r\n        email: [\r\n          { required: true, message: 'Email is required', trigger: 'blur' },\r\n          { type: 'email', message: 'Please enter a valid email address', trigger: ['blur', 'change'] },\r\n        ],\r\n      },\r\n      passwordRules: {\r\n        currentPassword: [\r\n          { required: true, message: 'Please enter the current password', trigger: 'blur' },\r\n        ],\r\n        newPassword: [\r\n          { validator: validatePassword, required: true, trigger: 'blur' },\r\n        ],\r\n        confirmPassword: [\r\n          { validator: validatePassword, required: true, trigger: 'blur' },\r\n          { validator: this.validateConfirmPassword, trigger: 'blur' },\r\n        ],\r\n      },\r\n      passwordDialogVisible: false,\r\n    };\r\n  },\r\n  methods: {\r\n    openPasswordDialog() {\r\n      this.passwordDialogVisible = true;\r\n    },\r\n    validateConfirmPassword(rule, value, callback) {\r\n      if (value !== this.passwordData.newPassword) {\r\n        callback(new Error('Passwords do not match'));\r\n      } else {\r\n        callback();\r\n      }\r\n    },\r\n    updateProfile() {\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request.put('/user/update', this.user).then((res) => {\r\n            if (res.code === '200') {\r\n              // Successfully updated\r\n              this.$message.success('Profile updated successfully');\r\n\r\n              // Update the cached user information in the browser\r\n              localStorage.setItem('xm-user', JSON.stringify(this.user));\r\n\r\n              // Trigger parent data update\r\n              this.$emit('update:user');\r\n            } else {\r\n              this.$message.error(res.msg);\r\n            }\r\n          });\r\n        } else {\r\n          this.$message.error('Please check your input and try again.');\r\n        }\r\n      });\r\n    },\r\n    updatePassword() {\r\n      this.$refs.passwordFormRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request.put('/updatePassword', this.passwordData).then((res) => {\r\n            if (res.code === '200') {\r\n              // Successfully updated password\r\n              localStorage.removeItem('xm-user'); // Clear cached user information\r\n              this.$message.success('Password changed successfully');\r\n              this.$router.push('/login');\r\n            } else {\r\n              this.$message.error(res.msg);\r\n            }\r\n          });\r\n        } else {\r\n          this.$message.error('Please check your input and try again.');\r\n        }\r\n      });\r\n    },\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      // Replace the user's avatar property with the link to the uploaded image\r\n      this.$set(this.user, 'avatar', response.data);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.centered-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh; /* Full viewport height for vertical centering */\r\n  background-color: #f2f2f5;\r\n}\r\n\r\n.user-card {\r\n  width: 50%; /* Adjust width to make the form larger */\r\n  max-width: 600px; /* Limit the maximum width for better responsiveness */\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n  background-color: #fff;\r\n}\r\n\r\n.user-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.user-form {\r\n  padding: 40px 60px; /* Increased padding for more spacious layout */\r\n  background-color: #fff;\r\n}\r\n\r\n.avatar-upload-container {\r\n  margin: 20px;\r\n  text-align: center;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.avatar-upload-container:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.avatar-uploader .el-upload {\r\n  border-radius: 50%;\r\n}\r\n\r\n.avatar-uploader .el-upload {\r\n  border: 2px dashed #d9d9d9;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border-radius: 50%;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.avatar-uploader .el-upload:hover {\r\n  border-color: #409eff;\r\n}\r\n\r\n.avatar-uploader-icon {\r\n  font-size: 32px;\r\n  color: #8c939d;\r\n  width: 150px; /* Increase avatar size */\r\n  height: 150px;\r\n  line-height: 150px;\r\n  text-align: center;\r\n  border-radius: 50%;\r\n  background-color: #e9ebf0;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n}\r\n\r\n.avatar-uploader-icon:hover {\r\n  background-color: #d1d5db;\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.avatar {\r\n  width: 150px; /* Increase avatar size */\r\n  height: 150px;\r\n  display: block;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: 2px solid #409eff;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.avatar:hover {\r\n  border-color: #66b1ff;\r\n}\r\n\r\n.el-form-item__label {\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.input-field {\r\n  border-radius: 5px;\r\n  transition: border-color 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.input-field:focus {\r\n  border-color: #409eff;\r\n  box-shadow: 0 0 5px rgba(64, 158, 255, 0.5);\r\n}\r\n\r\n.button-container {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.save-button {\r\n  background-color: #409eff;\r\n  border-color: #409eff;\r\n  transition: background-color 0.3s ease, border-color 0.3s ease;\r\n}\r\n\r\n.save-button:hover {\r\n  background-color: #66b1ff;\r\n  border-color: #66b1ff;\r\n}\r\n\r\n.dialog-footer {\r\n  text-align: right;\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":";AAqGA;EACAA,IAAA;EACAC,KAAA;IACA,MAAAC,gBAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,MAAAC,eAAA;MACA,IAAAF,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA,YAAAD,eAAA,CAAAE,IAAA,CAAAJ,KAAA;QACAC,QAAA,KAAAE,KAAA;MACA;QACAF,QAAA;MACA;IACA;IAEA;MACAI,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,YAAA;QACAC,eAAA;QACAC,WAAA;QACAC,eAAA;MACA;MACAC,YAAA;QACAC,KAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,OAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAE,KAAA,GACA;UAAAJ,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,IAAA;UAAAJ,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAI,aAAA;QACAX,eAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,WAAA,GACA;UAAAW,SAAA,EAAAzB,gBAAA;UAAAkB,QAAA;UAAAE,OAAA;QAAA,EACA;QACAL,eAAA,GACA;UAAAU,SAAA,EAAAzB,gBAAA;UAAAkB,QAAA;UAAAE,OAAA;QAAA,GACA;UAAAK,SAAA,OAAAC,uBAAA;UAAAN,OAAA;QAAA;MAEA;MACAO,qBAAA;IACA;EACA;EACAC,OAAA;IACAC,mBAAA;MACA,KAAAF,qBAAA;IACA;IACAD,wBAAAzB,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,UAAAU,YAAA,CAAAE,WAAA;QACAX,QAAA,KAAAE,KAAA;MACA;QACAF,QAAA;MACA;IACA;IACA2B,cAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAC,QAAA,CAAAC,GAAA,sBAAA7B,IAAA,EAAA8B,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;;cAEA;cACA/B,YAAA,CAAAgC,OAAA,YAAAlC,IAAA,CAAAmC,SAAA,MAAApC,IAAA;;cAEA;cACA,KAAAqC,KAAA;YACA;cACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAP,GAAA,CAAAQ,GAAA;YACA;UACA;QACA;UACA,KAAAN,QAAA,CAAAK,KAAA;QACA;MACA;IACA;IACAE,eAAA;MACA,KAAAhB,KAAA,CAAAiB,eAAA,CAAAf,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAC,QAAA,CAAAC,GAAA,yBAAAxB,YAAA,EAAAyB,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA;cACA7B,YAAA,CAAAuC,UAAA;cACA,KAAAT,QAAA,CAAAC,OAAA;cACA,KAAAS,OAAA,CAAAC,IAAA;YACA;cACA,KAAAX,QAAA,CAAAK,KAAA,CAAAP,GAAA,CAAAQ,GAAA;YACA;UACA;QACA;UACA,KAAAN,QAAA,CAAAK,KAAA;QACA;MACA;IACA;IACAO,oBAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA;MACA;MACA,KAAAC,IAAA,MAAAjD,IAAA,YAAA8C,QAAA,CAAAtD,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}