{"ast":null,"code":"export default {\n  name: \"Room\",\n  data() {\n    return {\n      tableData: [],\n      // All data\n      pageNum: 1,\n      // Current page number\n      pageSize: 10,\n      // Number of items per page\n      total: 0,\n      name: null,\n      fromVisible: false,\n      form: {\n        name: '',\n        // Initialize name\n        animal: '' // Initialize animal\n      },\n\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please enter room number',\n          trigger: 'blur'\n        }],\n        animal: [{\n          required: true,\n          message: 'Please enter the boarded pet name',\n          trigger: 'blur'\n        }]\n      },\n      ids: []\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  methods: {\n    handleAdd() {\n      // Add new data\n      this.form = {\n        name: '',\n        animal: ''\n      }; // Clear data when adding new data\n      this.fromVisible = true; // Open dialog\n    },\n\n    handleEdit(row) {\n      // Edit data\n      this.form = JSON.parse(JSON.stringify(row)); // Assign value to form object, make sure to deep copy data\n      this.fromVisible = true; // Open dialog\n    },\n\n    save() {\n      // Logic triggered by the save button, it will trigger add or update\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/room/update' : '/room/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // Indicates successful save\n              this.$message.success('Save successful');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // Show error message\n            }\n          });\n        }\n      });\n    },\n\n    del(id) {\n      // Delete single item\n      this.$confirm('Are you sure you want to delete?', 'Confirm Delete', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/room/delete/' + id).then(res => {\n          if (res.code === '200') {\n            // Indicates successful operation\n            this.$message.success('Operation successful');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // Show error message\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // Currently selected rows\n      this.ids = rows.map(v => v.id); //  [1,2]\n    },\n\n    delBatch() {\n      // Batch delete\n      if (!this.ids.length) {\n        this.$message.warning('Please select data');\n        return;\n      }\n      this.$confirm('Are you sure you want to delete these items?', 'Confirm Delete', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/room/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // Indicates successful operation\n            this.$message.success('Operation successful');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // Show error message\n          }\n        });\n      }).catch(() => {});\n    },\n    markRoomVacant(row) {\n      // Mark room as vacant\n      this.$confirm('Has the pet been adopted and is the room now vacant?', 'Confirm Vacancy', {\n        type: 'info'\n      }).then(() => {\n        const updatedRoom = {\n          ...row,\n          status: 'Vacant',\n          animal: ''\n        }; // Update the room's status and clear the animal\n        this.$request({\n          url: `/room/update`,\n          // Use the correct endpoint\n          method: 'PUT',\n          data: updatedRoom // Pass the updated room object\n        }).then(res => {\n          if (res.code === '200') {\n            // Successful update\n            this.$message.success('Room marked as vacant');\n            this.load(this.pageNum); // Reload the current page\n          } else {\n            this.$message.error(res.msg); // Error message\n          }\n        }).catch(error => {\n          console.error('Error updating room:', error);\n          this.$message.error('Failed to update room status');\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // Load data with pagination\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/room/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          name: this.name\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    reset() {\n      // Reset search criteria\n      this.name = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      // Handle page change\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","fromVisible","form","animal","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","ids","created","load","methods","handleAdd","handleEdit","row","stringify","save","$refs","formRef","validate","valid","$request","url","id","method","then","res","code","$message","success","error","msg","del","$confirm","type","response","delete","catch","handleSelectionChange","rows","map","v","delBatch","length","warning","markRoomVacant","updatedRoom","status","console","get","params","list","reset","handleCurrentChange"],"sources":["src/views/manager/Room.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Search Section -->\r\n    <div class=\"search\">\r\n      <el-input\r\n          placeholder=\"Enter Room Number\"\r\n          style=\"width: 200px\"\r\n          v-model=\"name\"\r\n      ></el-input>\r\n      <el-button\r\n          type=\"info\"\r\n          plain\r\n          style=\"margin-left: 10px\"\r\n          @click=\"load(1)\"\r\n      >Search</el-button>\r\n      <el-button\r\n          type=\"warning\"\r\n          plain\r\n          style=\"margin-left: 10px\"\r\n          @click=\"reset\"\r\n      >Reset</el-button>\r\n    </div>\r\n\r\n    <!-- Operation Section -->\r\n    <div class=\"operation\">\r\n      <el-button type=\"primary\" plain @click=\"handleAdd\">Add New</el-button>\r\n      <el-button type=\"danger\" plain @click=\"delBatch\">Delete Selected</el-button>\r\n    </div>\r\n\r\n    <!-- Table Section -->\r\n    <div class=\"table\">\r\n      <el-table\r\n          :data=\"tableData\"\r\n          stripe\r\n          @selection-change=\"handleSelectionChange\"\r\n      >\r\n        <el-table-column\r\n            type=\"selection\"\r\n            width=\"55\"\r\n            align=\"center\"\r\n        ></el-table-column>\r\n        <el-table-column\r\n            prop=\"id\"\r\n            label=\"ID\"\r\n            width=\"80\"\r\n            align=\"center\"\r\n            sortable\r\n        ></el-table-column>\r\n        <el-table-column\r\n            prop=\"name\"\r\n            label=\"Room Number\"\r\n            show-overflow-tooltip\r\n        ></el-table-column>\r\n        <el-table-column\r\n            prop=\"status\"\r\n            label=\"Room Status\"\r\n            show-overflow-tooltip\r\n        ></el-table-column>\r\n        <el-table-column prop=\"animal\" label=\"Boarded Pet\"></el-table-column>\r\n\r\n        <el-table-column label=\"Actions\" width=\"240\" align=\"center\">\r\n          <template v-slot=\"scope\">\r\n            <el-button\r\n                plain\r\n                type=\"primary\"\r\n                @click=\"handleEdit(scope.row)\"\r\n                size=\"mini\"\r\n            >Edit</el-button>\r\n            <el-button\r\n                plain\r\n                type=\"danger\"\r\n                size=\"mini\"\r\n                @click=\"del(scope.row.id)\"\r\n            >Delete</el-button>\r\n            <!-- New button for marking room as vacant -->\r\n            <el-button\r\n                plain\r\n                type=\"success\"\r\n                size=\"mini\"\r\n                @click=\"markRoomVacant(scope.row)\"\r\n            >Mark as Vacant</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- Pagination Section -->\r\n      <div class=\"pagination\">\r\n        <el-pagination\r\n            background\r\n            @current-change=\"handleCurrentChange\"\r\n            :current-page=\"pageNum\"\r\n            :page-sizes=\"[5, 10, 20]\"\r\n            :page-size=\"pageSize\"\r\n            layout=\"total, prev, pager, next\"\r\n            :total=\"total\"\r\n        >\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Dialog Section -->\r\n    <el-dialog\r\n        title=\"Information\"\r\n        :visible.sync=\"fromVisible\"\r\n        width=\"40%\"\r\n        :close-on-click-modal=\"false\"\r\n        destroy-on-close\r\n    >\r\n      <el-form\r\n          label-width=\"100px\"\r\n          style=\"padding-right: 50px\"\r\n          :model=\"form\"\r\n          :rules=\"rules\"\r\n          ref=\"formRef\"\r\n      >\r\n        <el-form-item prop=\"name\" label=\"Room Number\">\r\n          <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <!-- New field for the boarded pet -->\r\n        <el-form-item prop=\"animal\" label=\"Boarded Pet\">\r\n          <el-input v-model=\"form.animal\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"fromVisible = false\">Cancel</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">Confirm</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Room\",\r\n  data() {\r\n    return {\r\n      tableData: [],  // All data\r\n      pageNum: 1,   // Current page number\r\n      pageSize: 10,  // Number of items per page\r\n      total: 0,\r\n      name: null,\r\n      fromVisible: false,\r\n      form: {\r\n        name: '', // Initialize name\r\n        animal: '', // Initialize animal\r\n      },\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        name: [\r\n          { required: true, message: 'Please enter room number', trigger: 'blur' },\r\n        ],\r\n        animal: [\r\n          { required: true, message: 'Please enter the boarded pet name', trigger: 'blur' },\r\n        ],\r\n      },\r\n      ids: []\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1)\r\n  },\r\n  methods: {\r\n    handleAdd() {   // Add new data\r\n      this.form = { name: '', animal: '' }  // Clear data when adding new data\r\n      this.fromVisible = true   // Open dialog\r\n    },\r\n    handleEdit(row) {   // Edit data\r\n      this.form = JSON.parse(JSON.stringify(row))  // Assign value to form object, make sure to deep copy data\r\n      this.fromVisible = true   // Open dialog\r\n    },\r\n    save() {   // Logic triggered by the save button, it will trigger add or update\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request({\r\n            url: this.form.id ? '/room/update' : '/room/add',\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // Indicates successful save\r\n              this.$message.success('Save successful')\r\n              this.load(1)\r\n              this.fromVisible = false\r\n            } else {\r\n              this.$message.error(res.msg)  // Show error message\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    del(id) {   // Delete single item\r\n      this.$confirm('Are you sure you want to delete?', 'Confirm Delete', { type: \"warning\" }).then(response => {\r\n        this.$request.delete('/room/delete/' + id).then(res => {\r\n          if (res.code === '200') {   // Indicates successful operation\r\n            this.$message.success('Operation successful')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // Show error message\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    handleSelectionChange(rows) {   // Currently selected rows\r\n      this.ids = rows.map(v => v.id)   //  [1,2]\r\n    },\r\n    delBatch() {   // Batch delete\r\n      if (!this.ids.length) {\r\n        this.$message.warning('Please select data')\r\n        return\r\n      }\r\n      this.$confirm('Are you sure you want to delete these items?', 'Confirm Delete', { type: \"warning\" }).then(response => {\r\n        this.$request.delete('/room/delete/batch', { data: this.ids }).then(res => {\r\n          if (res.code === '200') {   // Indicates successful operation\r\n            this.$message.success('Operation successful')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // Show error message\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    markRoomVacant(row) {  // Mark room as vacant\r\n      this.$confirm('Has the pet been adopted and is the room now vacant?', 'Confirm Vacancy', { type: 'info' }).then(() => {\r\n        const updatedRoom = { ...row, status: 'Vacant', animal: '' };  // Update the room's status and clear the animal\r\n        this.$request({\r\n          url: `/room/update`,  // Use the correct endpoint\r\n          method: 'PUT',\r\n          data: updatedRoom  // Pass the updated room object\r\n        }).then(res => {\r\n          if (res.code === '200') { // Successful update\r\n            this.$message.success('Room marked as vacant')\r\n            this.load(this.pageNum) // Reload the current page\r\n          } else {\r\n            this.$message.error(res.msg) // Error message\r\n          }\r\n        }).catch(error => {\r\n          console.error('Error updating room:', error);\r\n          this.$message.error('Failed to update room status');\r\n        });\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    load(pageNum) {  // Load data with pagination\r\n      if (pageNum) this.pageNum = pageNum\r\n      this.$request.get('/room/selectPage', {\r\n        params: {\r\n          pageNum: this.pageNum,\r\n          pageSize: this.pageSize,\r\n          name: this.name,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data?.list\r\n        this.total = res.data?.total\r\n      })\r\n    },\r\n    reset() {   // Reset search criteria\r\n      this.name = null\r\n      this.load(1)\r\n    },\r\n    handleCurrentChange(pageNum) {  // Handle page change\r\n      this.load(pageNum)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Add your styles here */\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}