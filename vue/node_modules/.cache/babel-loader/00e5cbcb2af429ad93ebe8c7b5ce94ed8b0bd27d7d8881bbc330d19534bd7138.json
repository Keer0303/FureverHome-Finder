{"ast":null,"code":"export default {\n  name: \"AdminPerson\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        phone: [{\n          required: true,\n          message: 'Phone number is required',\n          trigger: 'blur'\n        }, {\n          pattern: /^[0-9]{10}$/,\n          message: 'Please enter a valid 10-digit phone number',\n          trigger: ['blur', 'change']\n        }],\n        email: [{\n          required: true,\n          message: 'Email is required',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Please enter a valid email address',\n          trigger: ['blur', 'change']\n        }]\n      }\n    };\n  },\n  methods: {\n    update() {\n      // Validate the form before proceeding\n      this.$refs.userForm.validate(valid => {\n        if (valid) {\n          // Save the current user information to the database\n          this.$request.put('/admin/update', this.user).then(res => {\n            if (res.code === '200') {\n              // Successfully updated\n              this.$message.success('Saved successfully');\n\n              // Update the cached user information in the browser\n              localStorage.setItem('xm-user', JSON.stringify(this.user));\n\n              // Trigger parent data update\n              this.$emit('update:user');\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        } else {\n          this.$message.error('Please check your input and try again.');\n        }\n      });\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // Replace the user's avatar property with the link to the uploaded image\n      this.$set(this.user, 'avatar', response.data);\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","rules","phone","required","message","trigger","pattern","email","type","methods","update","$refs","userForm","validate","valid","$request","put","then","res","code","$message","success","setItem","stringify","$emit","error","msg","handleAvatarSuccess","response","file","fileList","$set"],"sources":["src/views/manager/AdminPerson.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card style=\"width: 50%\">\r\n      <el-form :model=\"user\" :rules=\"rules\" ref=\"userForm\" label-width=\"100px\" style=\"padding-right: 50px\">\r\n        <div style=\"margin: 15px; text-align: center\">\r\n          <el-upload\r\n              class=\"avatar-uploader\"\r\n              :action=\"$baseUrl + '/files/upload'\"\r\n              :show-file-list=\"false\"\r\n              :on-success=\"handleAvatarSuccess\"\r\n          >\r\n            <img v-if=\"user.avatar\" :src=\"user.avatar\" class=\"avatar\" />\r\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n          </el-upload>\r\n        </div>\r\n        <el-form-item label=\"Username\" prop=\"username\">\r\n          <el-input v-model=\"user.username\" placeholder=\"Username\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Name\" prop=\"name\">\r\n          <el-input v-model=\"user.name\" placeholder=\"Name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item\r\n            label=\"Phone\"\r\n            prop=\"phone\"\r\n        >\r\n          <el-input v-model=\"user.phone\" placeholder=\"Phone\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item\r\n            label=\"Email\"\r\n            prop=\"email\"\r\n        >\r\n          <el-input v-model=\"user.email\" placeholder=\"Email\"></el-input>\r\n        </el-form-item>\r\n        <div style=\"text-align: center; margin-bottom: 20px\">\r\n          <el-button type=\"primary\" @click=\"update\">Save</el-button>\r\n        </div>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"AdminPerson\",\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        phone: [\r\n          { required: true, message: 'Phone number is required', trigger: 'blur' },\r\n          { pattern: /^[0-9]{10}$/, message: 'Please enter a valid 10-digit phone number', trigger: ['blur', 'change'] },\r\n        ],\r\n        email: [\r\n          { required: true, message: 'Email is required', trigger: 'blur' },\r\n          { type: 'email', message: 'Please enter a valid email address', trigger: ['blur', 'change'] },\r\n        ],\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      // Validate the form before proceeding\r\n      this.$refs.userForm.validate((valid) => {\r\n        if (valid) {\r\n          // Save the current user information to the database\r\n          this.$request.put('/admin/update', this.user).then(res => {\r\n            if (res.code === '200') {\r\n              // Successfully updated\r\n              this.$message.success('Saved successfully')\r\n\r\n              // Update the cached user information in the browser\r\n              localStorage.setItem('xm-user', JSON.stringify(this.user))\r\n\r\n              // Trigger parent data update\r\n              this.$emit('update:user')\r\n            } else {\r\n              this.$message.error(res.msg)\r\n            }\r\n          })\r\n        } else {\r\n          this.$message.error('Please check your input and try again.')\r\n        }\r\n      })\r\n    },\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      // Replace the user's avatar property with the link to the uploaded image\r\n      this.$set(this.user, 'avatar', response.data)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/deep/.el-form-item__label {\r\n  font-weight: bold;\r\n}\r\n/deep/.el-upload {\r\n  border-radius: 50%;\r\n}\r\n/deep/.avatar-uploader .el-upload {\r\n  border: 1px dashed #d9d9d9;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border-radius: 50%;\r\n}\r\n/deep/.avatar-uploader .el-upload:hover {\r\n  border-color: #409EFF;\r\n}\r\n.avatar-uploader-icon {\r\n  font-size: 28px;\r\n  color: #8c939d;\r\n  width: 120px;\r\n  height: 120px;\r\n  line-height: 120px;\r\n  text-align: center;\r\n  border-radius: 50%;\r\n}\r\n.avatar {\r\n  width: 120px;\r\n  height: 120px;\r\n  display: block;\r\n  border-radius: 50%;\r\n}\r\n</style>\r\n"],"mappings":"AA0CA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;QACAC,KAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,OAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAE,KAAA,GACA;UAAAJ,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAG,IAAA;UAAAJ,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAI,OAAA;IACAC,OAAA;MACA;MACA,KAAAC,KAAA,CAAAC,QAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAC,QAAA,CAAAC,GAAA,uBAAApB,IAAA,EAAAqB,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;;cAEA;cACAtB,YAAA,CAAAuB,OAAA,YAAAzB,IAAA,CAAA0B,SAAA,MAAA3B,IAAA;;cAEA;cACA,KAAA4B,KAAA;YACA;cACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAP,GAAA,CAAAQ,GAAA;YACA;UACA;QACA;UACA,KAAAN,QAAA,CAAAK,KAAA;QACA;MACA;IACA;IACAE,oBAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA;MACA;MACA,KAAAC,IAAA,MAAAnC,IAAA,YAAAgC,QAAA,CAAAjC,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}