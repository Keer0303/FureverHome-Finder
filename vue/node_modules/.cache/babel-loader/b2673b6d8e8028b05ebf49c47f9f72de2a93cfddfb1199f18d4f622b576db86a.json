{"ast":null,"code":"export default {\n  name: \"UserPerson\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        email: [{\n          required: true,\n          message: 'Email is required',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Please enter a valid email address',\n          trigger: ['blur', 'change']\n        }]\n      }\n    };\n  },\n  methods: {\n    update() {\n      // Validate the form before proceeding\n      this.$refs.userForm.validate(valid => {\n        if (valid) {\n          // Save the current user information to the database\n          this.$request.put('/user/update', this.user).then(res => {\n            if (res.code === '200') {\n              // Successfully updated\n              this.$message.success('Saved successfully');\n\n              // Update the cached user information in the browser\n              localStorage.setItem('xm-user', JSON.stringify(this.user));\n\n              // Trigger parent data update\n              this.$emit('update:user');\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        } else {\n          this.$message.error('Please check your input and try again.');\n        }\n      });\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // Replace the user's avatar property with the link to the uploaded image\n      this.$set(this.user, 'avatar', response.data);\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","rules","email","required","message","trigger","type","methods","update","$refs","userForm","validate","valid","$request","put","then","res","code","$message","success","setItem","stringify","$emit","error","msg","handleAvatarSuccess","response","file","fileList","$set"],"sources":["src/views/manager/UserPerson.vue"],"sourcesContent":["<template>\r\n  <div class=\"centered-wrapper\">\r\n    <el-card class=\"user-card\">\r\n      <el-form :model=\"user\" :rules=\"rules\" ref=\"userForm\" label-width=\"100px\" class=\"user-form\">\r\n        <div class=\"avatar-upload-container\">\r\n          <el-tooltip content=\"Upload Image\" placement=\"top\">\r\n            <el-upload\r\n                class=\"avatar-uploader\"\r\n                :action=\"$baseUrl + '/files/upload'\"\r\n                :show-file-list=\"false\"\r\n                :on-success=\"handleAvatarSuccess\"\r\n            >\r\n              <img v-if=\"user.avatar\" :src=\"user.avatar\" class=\"avatar\" />\r\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n            </el-upload>\r\n          </el-tooltip>\r\n        </div>\r\n        <el-form-item label=\"Username\" prop=\"username\">\r\n          <el-input\r\n              v-model=\"user.username\"\r\n              placeholder=\"Username\"\r\n              disabled\r\n              class=\"input-field\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Name\" prop=\"name\">\r\n          <el-input\r\n              v-model=\"user.name\"\r\n              placeholder=\"Name\"\r\n              class=\"input-field\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Phone\" prop=\"phone\">\r\n          <el-input\r\n              v-model=\"user.phone\"\r\n              placeholder=\"Phone\"\r\n              class=\"input-field\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Email\" prop=\"email\" :rules=\"[{ required: true, message: 'Email is required', trigger: 'blur' }, { type: 'email', message: 'Please enter a valid email address', trigger: ['blur', 'change'] }]\">\r\n          <el-input\r\n              v-model=\"user.email\"\r\n              placeholder=\"Email\"\r\n              class=\"input-field\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Credit\" prop=\"credit\">\r\n          <el-input\r\n              v-model=\"user.account\"\r\n              disabled\r\n              placeholder=\"Credit\"\r\n              class=\"input-field\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <div class=\"button-container\">\r\n          <el-button type=\"primary\" @click=\"update\" class=\"save-button\">\r\n            Save\r\n          </el-button>\r\n        </div>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"UserPerson\",\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        email: [\r\n          { required: true, message: 'Email is required', trigger: 'blur' },\r\n          { type: 'email', message: 'Please enter a valid email address', trigger: ['blur', 'change'] },\r\n        ],\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      // Validate the form before proceeding\r\n      this.$refs.userForm.validate((valid) => {\r\n        if (valid) {\r\n          // Save the current user information to the database\r\n          this.$request.put('/user/update', this.user).then(res => {\r\n            if (res.code === '200') {\r\n              // Successfully updated\r\n              this.$message.success('Saved successfully')\r\n\r\n              // Update the cached user information in the browser\r\n              localStorage.setItem('xm-user', JSON.stringify(this.user))\r\n\r\n              // Trigger parent data update\r\n              this.$emit('update:user')\r\n            } else {\r\n              this.$message.error(res.msg)\r\n            }\r\n          })\r\n        } else {\r\n          this.$message.error('Please check your input and try again.')\r\n        }\r\n      })\r\n    },\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      // Replace the user's avatar property with the link to the uploaded image\r\n      this.$set(this.user, 'avatar', response.data)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.centered-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh; /* Full viewport height for vertical centering */\r\n  background-color: #f2f2f5;\r\n}\r\n\r\n.user-card {\r\n  width: 50%; /* Adjust width to make the form larger */\r\n  max-width: 600px; /* Limit the maximum width for better responsiveness */\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n  background-color: #fff;\r\n}\r\n\r\n.user-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.user-form {\r\n  padding: 40px 60px; /* Increased padding for more spacious layout */\r\n  background-color: #fff;\r\n}\r\n\r\n.avatar-upload-container {\r\n  margin: 20px;\r\n  text-align: center;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.avatar-upload-container:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.avatar-uploader .el-upload {\r\n  border-radius: 50%;\r\n}\r\n\r\n.avatar-uploader .el-upload {\r\n  border: 2px dashed #d9d9d9;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border-radius: 50%;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.avatar-uploader .el-upload:hover {\r\n  border-color: #409eff;\r\n}\r\n\r\n.avatar-uploader-icon {\r\n  font-size: 32px;\r\n  color: #8c939d;\r\n  width: 150px; /* Increase avatar size */\r\n  height: 150px;\r\n  line-height: 150px;\r\n  text-align: center;\r\n  border-radius: 50%;\r\n  background-color: #e9ebf0;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n}\r\n\r\n.avatar-uploader-icon:hover {\r\n  background-color: #d1d5db;\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.avatar {\r\n  width: 150px; /* Increase avatar size */\r\n  height: 150px;\r\n  display: block;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  border: 2px solid #409eff;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.avatar:hover {\r\n  border-color: #66b1ff;\r\n}\r\n\r\n.el-form-item__label {\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.input-field {\r\n  border-radius: 5px;\r\n  transition: border-color 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.input-field:focus {\r\n  border-color: #409eff;\r\n  box-shadow: 0 0 5px rgba(64, 158, 255, 0.5);\r\n}\r\n\r\n.button-container {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.save-button {\r\n  background-color: #409eff;\r\n  border-color: #409eff;\r\n  transition: background-color 0.3s ease, border-color 0.3s ease;\r\n}\r\n\r\n.save-button:hover {\r\n  background-color: #66b1ff;\r\n  border-color: #66b1ff;\r\n}\r\n</style>\r\n"],"mappings":"AAiEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;QACAC,KAAA,GACA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,IAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,OAAA;IACAC,OAAA;MACA;MACA,KAAAC,KAAA,CAAAC,QAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA;UACA,KAAAC,QAAA,CAAAC,GAAA,sBAAAlB,IAAA,EAAAmB,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;;cAEA;cACApB,YAAA,CAAAqB,OAAA,YAAAvB,IAAA,CAAAwB,SAAA,MAAAzB,IAAA;;cAEA;cACA,KAAA0B,KAAA;YACA;cACA,KAAAJ,QAAA,CAAAK,KAAA,CAAAP,GAAA,CAAAQ,GAAA;YACA;UACA;QACA;UACA,KAAAN,QAAA,CAAAK,KAAA;QACA;MACA;IACA;IACAE,oBAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA;MACA;MACA,KAAAC,IAAA,MAAAjC,IAAA,YAAA8B,QAAA,CAAA/B,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}