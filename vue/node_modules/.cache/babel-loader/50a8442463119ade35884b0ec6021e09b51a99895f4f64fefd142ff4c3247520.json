{"ast":null,"code":"export default {\n  name: \"Submit\",\n  data() {\n    return {\n      tableData: [],\n      // All data\n      pageNum: 1,\n      // Current page number\n      pageSize: 10,\n      // Items per page\n      total: 0,\n      time: null,\n      status: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please enter the description',\n          trigger: 'blur'\n        }]\n      },\n      ids: []\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  methods: {\n    handleAdd() {\n      // Add new data\n      this.form = {\n        status: 'Pending'\n      }; // Clear data when adding new data\n      this.fromVisible = true; // Open dialog\n    },\n\n    deal(row, status) {\n      let data = JSON.parse(JSON.stringify(row));\n      data.status = status;\n      this.$request.put('/submit/update', data).then(res => {\n        if (res.code === '200') {\n          this.$message.success('Operation successful');\n          this.load(1);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    save() {\n      // Logic triggered by save button, it triggers add or update\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/submit/update' : '/submit/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // Indicates successful save\n              this.$message.success('Save successful');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // Display error message\n            }\n          });\n        }\n      });\n    },\n\n    del(id) {\n      // Delete a single record\n      this.$confirm('Are you sure you want to delete this record? It may never be processed...', 'Soul Searching', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/submit/delete/' + id).then(res => {\n          if (res.code === '200') {\n            // Indicates successful operation\n            this.$message.success('Operation successful');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // Display error message\n          }\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // Pagination query\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/submit/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          startDate: this.startDate,\n          endDate: this.endDate,\n          time: this.time,\n          status: this.status\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    reset() {\n      this.time = null;\n      this.status = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      this.form.img = response.data;\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","time","status","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","ids","created","load","methods","handleAdd","deal","row","stringify","$request","put","then","res","code","$message","success","error","msg","save","$refs","formRef","validate","valid","url","id","method","del","$confirm","type","response","delete","catch","get","params","startDate","endDate","list","reset","handleCurrentChange","handleAvatarSuccess","file","fileList","img"],"sources":["src/views/manager/Submit.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search\">\r\n      <el-date-picker\r\n          v-model=\"time\"\r\n          type=\"daterange\"\r\n          range-separator=\"To\"\r\n          start-placeholder=\"Start date\"\r\n          end-placeholder=\"End date\"\r\n          style=\"width: 400px\">\r\n      </el-date-picker>\r\n      <el-select v-model=\"status\" placeholder=\"Search By Status\" style=\"width: 200px; margin-left: 5px\">\r\n        <el-option label=\"Pending\" value=\"Pending\"></el-option>\r\n        <el-option label=\"Processed\" value=\"Processed\"></el-option>\r\n      </el-select>\r\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">Search</el-button>\r\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">Reset</el-button>\r\n    </div>\r\n\r\n    <div class=\"operation\" v-if=\"user.role === 'USER'\">\r\n      <el-button type=\"primary\" plain @click=\"handleAdd\">Report</el-button>\r\n    </div>\r\n\r\n    <div class=\"table\">\r\n      <el-table :data=\"tableData\" stripe>\r\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\" align=\"center\" sortable></el-table-column>\r\n        <el-table-column prop=\"img\" label=\"Report Image\" show-overflow-tooltip>\r\n          <template v-slot=\"scope\">\r\n            <div style=\"display: flex; align-items: center\">\r\n              <el-image style=\"width: 40px; height: 40px\" v-if=\"scope.row.img\"\r\n                        :src=\"scope.row.img\" :preview-src-list=\"[scope.row.img]\"></el-image>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"name\" label=\"Description\" show-overflow-tooltip></el-table-column>\r\n        <el-table-column prop=\"time\" label=\"Report Time\"></el-table-column>\r\n        <el-table-column prop=\"status\" label=\"Status\"></el-table-column>\r\n\r\n        <el-table-column label=\"Operations\" width=\"180\" align=\"center\" v-if=\"user.role === 'ADMIN'\">\r\n          <template v-slot=\"scope\">\r\n            <div style=\"display: flex; gap: 10px; justify-content: center; align-items: center;\">\r\n              <el-button plain type=\"primary\" :disabled=\"scope.row.status === 'Processed'\" @click=\"deal(scope.row, 'Processed')\" size=\"mini\">Processed</el-button>\r\n              <el-button plain type=\"danger\" size=\"mini\" @click=\"del(scope.row.id)\">Delete</el-button>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <div class=\"pagination\">\r\n        <el-pagination\r\n            background\r\n            @current-change=\"handleCurrentChange\"\r\n            :current-page=\"pageNum\"\r\n            :page-sizes=\"[5, 10, 20]\"\r\n            :page-size=\"pageSize\"\r\n            layout=\"total, prev, pager, next\"\r\n            :total=\"total\">\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n\r\n    <el-dialog title=\"Please report real and effective information, thank you for your cooperation!\" :visible.sync=\"fromVisible\" width=\"40%\" :close-on-click-modal=\"false\" destroy-on-close>\r\n      <el-form label-width=\"100px\" style=\"padding-right: 50px\" :model=\"form\" :rules=\"rules\" ref=\"formRef\">\r\n        <el-form-item prop=\"img\" label=\"Upload Image\">\r\n          <el-upload\r\n              class=\"avatar-uploader\"\r\n              :action=\"$baseUrl + '/files/upload'\"\r\n              :headers=\"{ token: user.token }\"\r\n              list-type=\"picture\"\r\n              :on-success=\"handleAvatarSuccess\"\r\n          >\r\n            <el-button type=\"primary\">Upload Image</el-button>\r\n          </el-upload>\r\n        </el-form-item>\r\n        <el-form-item prop=\"name\" label=\"Description\">\r\n          <el-input type=\"textarea\" :rows=\"4\" v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"fromVisible = false\">Cancel</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">Confirm</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Submit\",\r\n  data() {\r\n    return {\r\n      tableData: [],  // All data\r\n      pageNum: 1,   // Current page number\r\n      pageSize: 10,  // Items per page\r\n      total: 0,\r\n      time: null,\r\n      status: null,\r\n      fromVisible: false,\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        name: [\r\n          { required: true, message: 'Please enter the description', trigger: 'blur' },\r\n        ],\r\n      },\r\n      ids: []\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1)\r\n  },\r\n  methods: {\r\n    handleAdd() {   // Add new data\r\n      this.form = {\r\n        status: 'Pending'\r\n      }  // Clear data when adding new data\r\n      this.fromVisible = true   // Open dialog\r\n    },\r\n    deal(row, status) {\r\n      let data = JSON.parse(JSON.stringify(row))\r\n      data.status = status\r\n      this.$request.put('/submit/update', data).then(res => {\r\n        if (res.code === '200') {\r\n          this.$message.success('Operation successful')\r\n          this.load(1)\r\n        } else {\r\n          this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n    save() {   // Logic triggered by save button, it triggers add or update\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request({\r\n            url: this.form.id ? '/submit/update' : '/submit/add',\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // Indicates successful save\r\n              this.$message.success('Save successful')\r\n              this.load(1)\r\n              this.fromVisible = false\r\n            } else {\r\n              this.$message.error(res.msg)  // Display error message\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    del(id) {   // Delete a single record\r\n      this.$confirm('Are you sure you want to delete this record? It may never be processed...', 'Soul Searching', { type: \"warning\" }).then(response => {\r\n        this.$request.delete('/submit/delete/' + id).then(res => {\r\n          if (res.code === '200') {   // Indicates successful operation\r\n            this.$message.success('Operation successful')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // Display error message\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    load(pageNum) {  // Pagination query\r\n      if (pageNum) this.pageNum = pageNum\r\n      this.$request.get('/submit/selectPage', {\r\n        params: {\r\n          pageNum: this.pageNum,\r\n          pageSize: this.pageSize,\r\n          startDate: this.startDate,\r\n          endDate: this.endDate,\r\n          time: this.time,\r\n          status: this.status,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data?.list\r\n        this.total = res.data?.total\r\n      })\r\n    },\r\n    reset() {\r\n      this.time = null\r\n      this.status = null\r\n      this.load(1)\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      this.form.img = response.data\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}